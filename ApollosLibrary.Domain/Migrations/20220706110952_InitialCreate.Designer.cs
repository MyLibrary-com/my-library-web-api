// <auto-generated />
using System;
using ApollosLibrary.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApollosLibrary.Domain.Migrations
{
    [DbContext(typeof(ApollosLibraryContext))]
    [Migration("20220706110952_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApollosLibrary.Domain.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorId");

                    b.HasIndex("CountryId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.AuthorRecord", b =>
                {
                    b.Property<int>("AuthorRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorRecordId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<bool>("ReportedVersion")
                        .HasColumnType("boolean");

                    b.HasKey("AuthorRecordId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CountryId");

                    b.ToTable("AuthorRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<int?>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverImage")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EIsbn")
                        .HasColumnType("text");

                    b.Property<int?>("Edition")
                        .HasColumnType("integer");

                    b.Property<int>("FictionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Isbn")
                        .HasColumnType("text");

                    b.Property<int>("PublicationFormatId")
                        .HasColumnType("integer");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("BookId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("FictionTypeId");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("PublicationFormatId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.BookRecord", b =>
                {
                    b.Property<int>("BookRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookRecordId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverImage")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EIsbn")
                        .HasColumnType("text");

                    b.Property<int?>("Edition")
                        .HasColumnType("integer");

                    b.Property<int>("FictionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Isbn")
                        .HasColumnType("text");

                    b.Property<int>("PublicationFormatId")
                        .HasColumnType("integer");

                    b.Property<bool>("ReportedVersion")
                        .HasColumnType("boolean");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("BookRecordId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessId"));

                    b.Property<int>("BusinessTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("BusinessId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CountryId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.BusinessRecord", b =>
                {
                    b.Property<int>("BusinessRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessRecordId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<int>("BusinessTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<bool>("ReportedVersion")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("BusinessRecordId");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.BusinessType", b =>
                {
                    b.Property<int>("BusinessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("BusinessTypeId");

                    b.ToTable("BusinessTypes");

                    b.HasData(
                        new
                        {
                            BusinessTypeId = 1,
                            Name = "Publisher"
                        },
                        new
                        {
                            BusinessTypeId = 2,
                            Name = "Bookshop"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            CountryId = "AX",
                            Name = "Åland Islands"
                        },
                        new
                        {
                            CountryId = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            CountryId = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            CountryId = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            CountryId = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            CountryId = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            CountryId = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            CountryId = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            CountryId = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            CountryId = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            CountryId = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            CountryId = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            CountryId = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            CountryId = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            CountryId = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            CountryId = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            CountryId = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            CountryId = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            CountryId = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            CountryId = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            CountryId = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            CountryId = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            CountryId = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            CountryId = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            CountryId = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            CountryId = "BO",
                            Name = "Bolivia, Plurinational State of"
                        },
                        new
                        {
                            CountryId = "BQ",
                            Name = "Bonaire, Sint Eustatius and Saba"
                        },
                        new
                        {
                            CountryId = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryId = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            CountryId = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            CountryId = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            CountryId = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            CountryId = "BN",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            CountryId = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            CountryId = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            CountryId = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            CountryId = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            CountryId = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            CountryId = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            CountryId = "CV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            CountryId = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            CountryId = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            CountryId = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            CountryId = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            CountryId = "CN",
                            Name = "China"
                        },
                        new
                        {
                            CountryId = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            CountryId = "CC",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            CountryId = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            CountryId = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            CountryId = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            CountryId = "CD",
                            Name = "Congo, the Democratic Republic of the"
                        },
                        new
                        {
                            CountryId = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            CountryId = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            CountryId = "CI",
                            Name = "CÃ´te d'Ivoire"
                        },
                        new
                        {
                            CountryId = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            CountryId = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            CountryId = "CW",
                            Name = "CuraÃ§ao"
                        },
                        new
                        {
                            CountryId = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            CountryId = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            CountryId = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            CountryId = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            CountryId = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            CountryId = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            CountryId = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            CountryId = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            CountryId = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            CountryId = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            CountryId = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            CountryId = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            CountryId = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            CountryId = "FK",
                            Name = "Falkland Islands (Malvinas)"
                        },
                        new
                        {
                            CountryId = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            CountryId = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            CountryId = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            CountryId = "FR",
                            Name = "France"
                        },
                        new
                        {
                            CountryId = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            CountryId = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            CountryId = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            CountryId = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            CountryId = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            CountryId = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            CountryId = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            CountryId = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            CountryId = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            CountryId = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            CountryId = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            CountryId = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            CountryId = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            CountryId = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            CountryId = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            CountryId = "GG",
                            Name = "Guernsey"
                        },
                        new
                        {
                            CountryId = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            CountryId = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            CountryId = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            CountryId = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            CountryId = "HM",
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            CountryId = "VA",
                            Name = "Holy See (Vatican City State)"
                        },
                        new
                        {
                            CountryId = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            CountryId = "HK",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            CountryId = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            CountryId = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            CountryId = "IN",
                            Name = "India"
                        },
                        new
                        {
                            CountryId = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            CountryId = "IR",
                            Name = "Iran, Islamic Republic of"
                        },
                        new
                        {
                            CountryId = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            CountryId = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            CountryId = "IM",
                            Name = "Isle of Man"
                        },
                        new
                        {
                            CountryId = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            CountryId = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            CountryId = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            CountryId = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            CountryId = "JE",
                            Name = "Jersey"
                        },
                        new
                        {
                            CountryId = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            CountryId = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            CountryId = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            CountryId = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            CountryId = "KP",
                            Name = "Korea, Democratic People's Republic of"
                        },
                        new
                        {
                            CountryId = "KR",
                            Name = "Korea, Republic of"
                        },
                        new
                        {
                            CountryId = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            CountryId = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            CountryId = "LA",
                            Name = "Lao People's Democratic Republic"
                        },
                        new
                        {
                            CountryId = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            CountryId = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            CountryId = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            CountryId = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            CountryId = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            CountryId = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            CountryId = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            CountryId = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            CountryId = "MO",
                            Name = "Macao"
                        },
                        new
                        {
                            CountryId = "MK",
                            Name = "Macedonia, the Former Yugoslav Republic of"
                        },
                        new
                        {
                            CountryId = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            CountryId = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            CountryId = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            CountryId = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            CountryId = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            CountryId = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            CountryId = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            CountryId = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            CountryId = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            CountryId = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            CountryId = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            CountryId = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            CountryId = "FM",
                            Name = "Micronesia, Federated States of"
                        },
                        new
                        {
                            CountryId = "MD",
                            Name = "Moldova, Republic of"
                        },
                        new
                        {
                            CountryId = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            CountryId = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            CountryId = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            CountryId = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            CountryId = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            CountryId = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            CountryId = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            CountryId = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            CountryId = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            CountryId = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            CountryId = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            CountryId = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            CountryId = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            CountryId = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            CountryId = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            CountryId = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            CountryId = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            CountryId = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            CountryId = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            CountryId = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            CountryId = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            CountryId = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            CountryId = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            CountryId = "PS",
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            CountryId = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            CountryId = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            CountryId = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            CountryId = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            CountryId = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            CountryId = "PN",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            CountryId = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            CountryId = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            CountryId = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            CountryId = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            CountryId = "RE",
                            Name = "RÃ©union"
                        },
                        new
                        {
                            CountryId = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            CountryId = "RU",
                            Name = "Russian Federation"
                        },
                        new
                        {
                            CountryId = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            CountryId = "BL",
                            Name = "Saint BarthÃ©lemy"
                        },
                        new
                        {
                            CountryId = "SH",
                            Name = "Saint Helena, Ascension and Tristan da Cunha"
                        },
                        new
                        {
                            CountryId = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            CountryId = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            CountryId = "MF",
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            CountryId = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            CountryId = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            CountryId = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            CountryId = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            CountryId = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            CountryId = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            CountryId = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            CountryId = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            CountryId = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            CountryId = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            CountryId = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            CountryId = "SX",
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            CountryId = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            CountryId = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            CountryId = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            CountryId = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            CountryId = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            CountryId = "GS",
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            CountryId = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            CountryId = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            CountryId = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            CountryId = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            CountryId = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            CountryId = "SJ",
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            CountryId = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            CountryId = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            CountryId = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            CountryId = "SY",
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            CountryId = "TW",
                            Name = "Taiwan, Province of China"
                        },
                        new
                        {
                            CountryId = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            CountryId = "TZ",
                            Name = "Tanzania, United Republic of"
                        },
                        new
                        {
                            CountryId = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            CountryId = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            CountryId = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            CountryId = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            CountryId = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            CountryId = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            CountryId = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            CountryId = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            CountryId = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            CountryId = "TC",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            CountryId = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            CountryId = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            CountryId = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            CountryId = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            CountryId = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            CountryId = "US",
                            Name = "United States"
                        },
                        new
                        {
                            CountryId = "UM",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            CountryId = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            CountryId = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            CountryId = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            CountryId = "VE",
                            Name = "Venezuela, Bolivarian Republic of"
                        },
                        new
                        {
                            CountryId = "VN",
                            Name = "Viet Nam"
                        },
                        new
                        {
                            CountryId = "VG",
                            Name = "Virgin Islands, British"
                        },
                        new
                        {
                            CountryId = "VI",
                            Name = "Virgin Islands, U.S."
                        },
                        new
                        {
                            CountryId = "WF",
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            CountryId = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            CountryId = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            CountryId = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            CountryId = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.EntryReport", b =>
                {
                    b.Property<int>("EntryReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntryReportId"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntryRecordId")
                        .HasColumnType("integer");

                    b.Property<int>("EntryReportStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("EntryTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("ReportedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EntryReportId");

                    b.HasIndex("EntryReportStatusId");

                    b.HasIndex("EntryTypeId");

                    b.ToTable("EntryReports");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.EntryReportStatus", b =>
                {
                    b.Property<int>("EntryReportStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntryReportStatusId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("EntryReportStatusId");

                    b.ToTable("EntryReportStatus");

                    b.HasData(
                        new
                        {
                            EntryReportStatusId = 1,
                            Name = "Open"
                        },
                        new
                        {
                            EntryReportStatusId = 2,
                            Name = "Cancelled"
                        },
                        new
                        {
                            EntryReportStatusId = 3,
                            Name = "Confirmed"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.EntryReportType", b =>
                {
                    b.Property<int>("EntryReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntryReportTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("EntryReportTypeId");

                    b.ToTable("EntryReportType");

                    b.HasData(
                        new
                        {
                            EntryReportTypeId = 1,
                            Name = "Business"
                        },
                        new
                        {
                            EntryReportTypeId = 2,
                            Name = "Author"
                        },
                        new
                        {
                            EntryReportTypeId = 3,
                            Name = "Book"
                        },
                        new
                        {
                            EntryReportTypeId = 4,
                            Name = "Series"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.ErrorCode", b =>
                {
                    b.Property<int>("ErrorCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ErrorCodeId"));

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("ErrorCodeId");

                    b.ToTable("ErrorCodes");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.FictionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("FictionTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            TypeId = 2,
                            Name = "Fiction"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.FormType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("FormTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Name = "Novel"
                        },
                        new
                        {
                            TypeId = 2,
                            Name = "Novella"
                        },
                        new
                        {
                            TypeId = 3,
                            Name = "Screenplay"
                        },
                        new
                        {
                            TypeId = 4,
                            Name = "Manuscript"
                        },
                        new
                        {
                            TypeId = 5,
                            Name = "Poem"
                        },
                        new
                        {
                            TypeId = 6,
                            Name = "Textbook"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LibraryId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.LibraryEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntryId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("EntryId");

                    b.HasIndex("BookId");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryEntries");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.PublicationFormat", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("PublicationFormats");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Name = "Printed"
                        },
                        new
                        {
                            TypeId = 2,
                            Name = "eBook"
                        },
                        new
                        {
                            TypeId = 3,
                            Name = "Audio Book"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeriesId"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("SeriesId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.SeriesRecord", b =>
                {
                    b.Property<int>("SeriesRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeriesRecordId"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("ReportedVersion")
                        .HasColumnType("boolean");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("SeriesRecordId");

                    b.HasIndex("SeriesId");

                    b.ToTable("SeriesRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionAdmin")
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("SubscriptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            SubscriptionId = new Guid("24e79f69-c680-47d4-acd0-97dcfe82c3d3"),
                            ExpiryDate = new NodaTime.LocalDateTime(2032, 7, 3, 11, 9, 50).PlusNanoseconds(746660100L),
                            SubscriptionAdmin = new Guid("00000000-0000-0000-0000-000000000000"),
                            SubscriptionDate = new NodaTime.LocalDateTime(2022, 7, 6, 11, 9, 50).PlusNanoseconds(746660100L),
                            SubscriptionTypeId = 1
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.SubscriptionType", b =>
                {
                    b.Property<int>("SubscriptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscriptionTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<decimal>("MonthlyRate")
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("Purchasable")
                        .HasColumnType("boolean");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("text");

                    b.HasKey("SubscriptionTypeId");

                    b.ToTable("SubscriptionTypes");

                    b.HasData(
                        new
                        {
                            SubscriptionTypeId = -1,
                            IsAvailable = true,
                            MaxUsers = 1,
                            MonthlyRate = 0.00m,
                            Purchasable = false,
                            SubscriptionName = "Signed Up"
                        },
                        new
                        {
                            SubscriptionTypeId = 1,
                            IsAvailable = true,
                            MaxUsers = 1,
                            MonthlyRate = 0.00m,
                            Purchasable = false,
                            SubscriptionName = "Staff Member"
                        },
                        new
                        {
                            SubscriptionTypeId = 2,
                            Description = "This subscription is for individuals keeping track of their own library.",
                            IsAvailable = true,
                            MaxUsers = 1,
                            MonthlyRate = 10.00m,
                            Purchasable = true,
                            StripeProductId = "prod_LlBGpg7ytim1dy",
                            SubscriptionName = "Individual Subscription"
                        },
                        new
                        {
                            SubscriptionTypeId = 3,
                            Description = "This subscription is for families keeping track of their own libraries. Each user will have their own library.",
                            IsAvailable = false,
                            MaxUsers = 5,
                            MonthlyRate = 30.00m,
                            Purchasable = true,
                            StripeProductId = "prod_LlBHeWO1QAe9Dx",
                            SubscriptionName = "Family Subscription"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.Domain.UserSubscription", b =>
                {
                    b.Property<int>("UserSubscrptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserSubscrptionId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserSubscrptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksBookId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsAuthorId", "BooksBookId");

                    b.HasIndex("BooksBookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksBookId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresGenreId")
                        .HasColumnType("integer");

                    b.HasKey("BooksBookId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookSeries", b =>
                {
                    b.Property<int>("BooksBookId")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("BooksBookId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("BookSeries");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Author", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.AuthorRecord", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Author", "Author")
                        .WithMany("AuthorRecords")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Author");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Book", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.HasOne("ApollosLibrary.Domain.FictionType", "FictionType")
                        .WithMany()
                        .HasForeignKey("FictionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.PublicationFormat", "PublicationFormat")
                        .WithMany()
                        .HasForeignKey("PublicationFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("FictionType");

                    b.Navigation("FormType");

                    b.Navigation("PublicationFormat");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.BookRecord", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Book", "Book")
                        .WithMany("BookRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Business", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.BusinessType", "Type")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.BusinessRecord", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Business", "Business")
                        .WithMany("BusinessRecords")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.EntryReport", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.EntryReportStatus", "EntryReportStatus")
                        .WithMany()
                        .HasForeignKey("EntryReportStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.EntryReportType", "EntryType")
                        .WithMany()
                        .HasForeignKey("EntryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntryReportStatus");

                    b.Navigation("EntryType");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.LibraryEntry", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Library", "Library")
                        .WithMany("LibraryEntries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Order", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.OrderItem", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.SeriesRecord", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Series", "Series")
                        .WithMany("SeriesRecords")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Subscription", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.UserSubscription", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Subscription", "Subscription")
                        .WithMany("SubscriptionUsers")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookSeries", b =>
                {
                    b.HasOne("ApollosLibrary.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApollosLibrary.Domain.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Author", b =>
                {
                    b.Navigation("AuthorRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Book", b =>
                {
                    b.Navigation("BookRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Business", b =>
                {
                    b.Navigation("BusinessRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Library", b =>
                {
                    b.Navigation("LibraryEntries");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Series", b =>
                {
                    b.Navigation("SeriesRecords");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.Subscription", b =>
                {
                    b.Navigation("SubscriptionUsers");
                });

            modelBuilder.Entity("ApollosLibrary.Domain.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
